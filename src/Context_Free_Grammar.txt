S -> STMTS NL | ε
STMTS -> STMTS NL1 STMT | STMT NL
STMT -> COND | LOOP | ASSIGN | IMPORT | FUNCTION | TRY | LET | CONST | VAR | LET | THROW | SWITCH
STMTLOOP -> STMTLOOP STMTS | STMTLOOP BREAK | STMTLOOP CONT | STMTS | BREAK | CONT

EXP -> PAREXP | DOTEXP | LOGICEXP | MATHEXP | FUNCEXP | ANONFUNCTION | ARR | ELMT | DICT | TUPLE | LIT | id
DOTEXP -> EXP dot DOTEXPR | EXP optChain DOTEXPR
DOTEXPR -> FUNCEXP | ELMT | id

ASSIGN -> ASSIGNCHAIN | id ASSIGNOP EXP
ASSIGNCHAIN -> id eq ASSIGNCHAIN COMMA | id eq EXP
ASSIGNOP -> eq | pluseq | mineq | multeq | diveq | modeq | poweq | ampeq | boreq | xoreq | sreq | usreq | sleq | andeq | oreq | nullishCoalescingEq | id inc | id dec | inc id | dec id

BREAK -> break SC
CONT -> continue SC

SWITCH -> LP EXP RP LC CASES RC
CASES -> CASE CASES | CASE DEFAULT | DEFAULT | CASE
CASE -> case LP LIT RP COLON STMTS BREAK SC

DEFAULT -> default LP LIT RP COLON STMTS BREAK SC

CONST -> const ASSIGNCHAIN SC

VAR -> var ASSIGNCHAIN SC | var id SC
LET -> let ASSIGNCHAIN SC | let id SC

PAREXP -> LP PAREXP1 RP
PAREXP1 -> EXP | PARLOGICEXP | PARMATHEXP | ε
PARLOGICEXP -> EXP NL RELOP NL EXP | not EXP | LOGICEXP
PARMATHEXP -> EXP NL MATHOP2 NL EXP | MATHEXP

LOGICEXP -> EXP RELOP EXP | not EXP
RELOP -> and | or | nullishCoalescing | in | not | neq | equal | strictEqual | gt | gte | lt | lte

MATHEXP -> EXP MATHOP2 EXP | MATHOP1 EXP
MATHOP1 -> plus | min | bnot
MATHOP2 -> mult | pow | div | mod | plus | min | sl | sr | usr | amp | bor | xor

FUNCEXP -> id TUPLE

THROW -> throw EXP SC

TRY -> LC STMTS RC CF
CF -> CATCH | FINALLY | CATCH FINALLY
CATCH -> LC STMTS RC 
FINALLY -> LC STMTS RC

ARR -> LP ARR RP | LB ARRLIST RB
ARRLIST -> EXP | ε

ELMT -> id LB EXP RB

PARAM -> id | id COMMA PARAM1 | ε
PARAM1 -> id | id COMMA PARAM1

OBJ -> LP OBJ RP | LC OBJLIST RC
OBJLIST -> OBJLIST OBJ1 | OBJ1 | ε
OBJ1 -> str COLON EXP COMMA | str COLON FUNCEXP

TUPLE -> LP ARGS RP
ARGS -> ARGS1 | ε
ARGS1 -> ARGS1 COMMA EXP | EXP

LIT -> REAL | int | xbo | str | false | true | null
REAL -> int dot int | dot int

IMPORT -> import PKGS from str SC | import DEFWC as id from str SC | import str SC
DEFWC -> id wildcard | id 
PKGS -> EXPORTS | DEFWC
EXPORTS -> lc EXPORT rc | lc EXPORT rc comma DEFWC | DEFWC comma lc EXPORT rc | lc EXPORTAS rc | lc str rc | lc default rc
EXPORT -> id comma EXPORT | id 
EXPORTAS -> id comma EXPORTAS comma id | str comma EXPORTAS comma id | id as id | str as id

COND -> if LP EXP RP LC STMTS RC CONDTAIL | if LP LIT RP LC STMTS RC CONDTAIL | ID1 eq EXP question EXP COLON EXP SC
CONDTAIL -> else if LP EXP RP LC STMTS RC CONDTAIL | CONDTAIL else LC STMTS RC | ε

DELETE -> delete EXP SC | delete 

LOOP ->  while  LP EXP  RP LC STMTLOOP RC | for  LP EXP in EXP  RP LC STMTLOOP RC | for  LP ASSIGNCHAIN sc RELOP sc MATHEXP  RP LC STMTLOOP RC | for  LP id sc RELOP sc MATHEXP  RP LC STMTLOOP RC


WITH -> with EXP as id COLON STMTS 

RET -> return EXP SC | return

ID -> id | ID dot id
ID1 -> let id | var id | id 

FUNCTION -> function id LP PARAM RP LC STMTS RC SC
ANONFUNCTION -> function LP PARAM RP LC STMTS RC SC

DEF -> def id LP DEFARGS RP DEFRETT COLON STMTS
DEFARGS -> DEFARGS1 | ε
DEFARGS1 -> DEFARGS1 COMMA id | id
DEFARG -> id COLON ARGTYPE | id
ARGTYPE -> LP ARGTYPE RP | id LB ARGTYPE RB | id
DEFRETT -> min gt id | ε

CLASS -> class id LP INHERIT RP COLON S | class id COLON S
INHERIT -> INHERIT COMMA PKG | PKG | ε

COMMA -> comma NL
COLON -> colon NL
BREAK -> NL break
LC -> lc NL
RC -> NL rc
LB -> lb NL
RB -> NL rb
LP -> lp NL
RP -> NL rp
NL -> NL nl | nl | ε
NL1 -> NL1 nl | nl
SC -> sc NL 

ENDLINE